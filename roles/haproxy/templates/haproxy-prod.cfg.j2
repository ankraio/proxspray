global
    log /dev/log    local0
    log /dev/log    local1 notice
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s
    user haproxy
    group haproxy
    daemon

defaults
    log     global
    mode    http
    option  httplog
    option  dontlognull
    timeout connect 5000
    timeout client  50000
    timeout server  50000
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http

# HAProxy config for prod.ankra.dev

frontend http-in
    bind *:80
    # custom domain ingress mappings
    {% if hostvars[inventory_hostname]['custom_domain_ingress'] is defined %}
    {% for entry in hostvars[inventory_hostname]['custom_domain_ingress'] %}
    acl host_{{ loop.index }} hdr_reg(host) -i ^{{ entry.host | replace('*', '.*') }}$
    use_backend {{ entry.service }}-backend if host_{{ loop.index }}
    {% endfor %}
    {% endif %}

    default_backend production-backend

# Dynamic backends based on custom_domain_ingress services + default production
{% set all_services = ['production'] %}
{% if hostvars[inventory_hostname]['custom_domain_ingress'] is defined %}
{% for entry in hostvars[inventory_hostname]['custom_domain_ingress'] %}
  {% if entry.service not in all_services %}
    {% set _ = all_services.append(entry.service) %}
  {% endif %}
{% endfor %}
{% endif %}
{% for service in all_services %}
backend {{ service }}-backend
{% for host in groups[service] %}
    server {{ host }} {{ hostvars[host]['ansible_host'] }}:{{ hostvars[host]['http_port'] }} check
{% endfor %}

{% endfor %}

# TLS Passthrough frontend for HTTPS
frontend https-in
    bind *:443
    mode tcp
    tcp-request inspect-delay 5s
    tcp-request content accept if { req.ssl_hello_type 1 }
    # custom domain ingress mappings (HTTPS)
    {% if hostvars[inventory_hostname]['custom_domain_ingress'] is defined %}
    {% for entry in hostvars[inventory_hostname]['custom_domain_ingress'] %}
    acl sni_{{ loop.index }} req.ssl_sni -i -m reg ^{{ entry.host | replace('*', '.*') }}$
    use_backend {{ entry.service }}-backend-https if sni_{{ loop.index }}
    {% endfor %}
    {% endif %}

    default_backend production-backend-https

# Dynamic HTTPS backends based on custom_domain_ingress services + default production
{% set all_services = ['production'] %}
{% if hostvars[inventory_hostname]['custom_domain_ingress'] is defined %}
{% for entry in hostvars[inventory_hostname]['custom_domain_ingress'] %}
  {% if entry.service not in all_services %}
    {% set _ = all_services.append(entry.service) %}
  {% endif %}
{% endfor %}
{% endif %}
{% for service in all_services %}
backend {{ service }}-backend-https
    mode tcp
{% for host in groups[service] %}
    server {{ host }} {{ hostvars[host]['ansible_host'] }}:{{ hostvars[host]['https_port'] }} check
{% endfor %}

{% endfor %}

# NATS TCP passthrough frontend on port 4222
frontend nats-tcp-in
    bind *:4222
    mode tcp
    # inspect TLS ClientHello for SNI
    tcp-request inspect-delay 5s
    tcp-request content accept if { req.ssl_hello_type 1 }
    # route based on custom nats_domain if defined
    {% if hostvars[inventory_hostname]['nats_domain'] is defined %}
    acl nats_sni req.ssl_sni -i {{ hostvars[inventory_hostname]['nats_domain'] }}
    use_backend nats-tcp-backend if nats_sni
    {% endif %}
    default_backend nats-tcp-backend

# NATS TCP backend for production (port 4222)
backend nats-tcp-backend
    mode tcp
{% for host in groups['production'] %}
    server {{ host }} {{ hostvars[host]['ansible_host'] }}:{{ hostvars[host]['nats_port'] }} check
{% endfor %}

listen stats
    bind {{ hostvars[inventory_hostname]['ansible_host'] }}:8404
    mode http
    stats enable
    stats uri /stats
    stats refresh 10s
    stats auth admin:admin
    stats show-legends
    stats show-node
    stats show-desc "HAProxy Prod Stats"
    stats admin if TRUE
